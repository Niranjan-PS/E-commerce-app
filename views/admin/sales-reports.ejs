<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sales Reports - Admin Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/admin.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    :root {
      --primary-color: #6f42c1;
      --secondary-color: #6c757d;
      --success-color: #198754;
      --info-color: #0dcaf0;
      --warning-color: #ffc107;
      --danger-color: #dc3545;
      --dark-color: #212529;
      --light-color: #f8f9fa;
    }

    body {
      background-color: var(--light-color);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .main-content {
      padding: 2rem;
    }

    .page-header {
      background: white;
      border-radius: 15px;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }

    .filter-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }

    .metrics-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .metric-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      text-align: center;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
      transition: transform 0.3s ease;
    }

    .metric-card:hover {
      transform: translateY(-5px);
    }

    .metric-icon {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1rem;
      font-size: 1.5rem;
      color: white;
    }

    .metric-icon.sales {
      background: linear-gradient(135deg, var(--success-color), #20c997);
    }

    .metric-icon.amount {
      background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
    }

    .metric-icon.discounts {
      background: linear-gradient(135deg, var(--warning-color), #fd7e14);
    }

    .metric-icon.coupons {
      background: linear-gradient(135deg, var(--info-color), #6f42c1);
    }

    .metric-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--dark-color);
      margin-bottom: 0.5rem;
    }

    .metric-label {
      color: var(--secondary-color);
      font-weight: 500;
    }

    .table-card {
      background: white;
      border-radius: 15px;
      padding: 1.5rem;
      box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    }

    .btn-export {
      background: linear-gradient(135deg, var(--success-color), #20c997);
      border: none;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 25px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .btn-export:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      color: white;
    }

    .btn-filter {
      background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
      border: none;
      color: white;
      padding: 0.5rem 1.5rem;
      border-radius: 25px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .btn-filter:hover {
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0,0,0,0.2);
      color: white;
    }

    .filter-group {
      margin-bottom: 1rem;
    }

    .filter-group label {
      font-weight: 600;
      color: var(--dark-color);
      margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
      border-radius: 10px;
      border: 2px solid #e9ecef;
      padding: 0.75rem;
      transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 0.2rem rgba(111, 66, 193, 0.25);
    }

    .table {
      border-radius: 10px;
      overflow: hidden;
      margin-bottom: 0;
      font-size: 0.9rem;
    }

    .table thead th {
      background: linear-gradient(135deg, var(--primary-color), #8b5cf6);
      color: white;
      border: none;
      font-weight: 600;
      padding: 1rem 0.75rem;
      text-align: center;
      white-space: nowrap;
      position: sticky;
      top: 0;
      z-index: 10;
    }

    .table tbody td {
      padding: 0.75rem;
      vertical-align: middle;
      border-color: #e9ecef;
      text-align: center;
      white-space: nowrap;
    }

    .table tbody tr:hover {
      background-color: #f8f9fa;
      transform: scale(1.01);
      transition: all 0.2s ease;
    }

    .table tbody tr:nth-child(even) {
      background-color: #f9f9f9;
    }

    .table-responsive {
      max-height: 600px;
      overflow-y: auto;
      border: 1px solid #dee2e6;
      border-radius: 10px;
    }

    .customer-info {
      text-align: left !important;
    }

    .customer-name {
      font-weight: 600;
      color: var(--dark-color);
    }

    .customer-email {
      font-size: 0.8rem;
      color: #666;
    }

    .amount-cell {
      font-weight: 600;
      color: var(--success-color);
    }

    .status-badge {
      padding: 0.25rem 0.5rem;
      border-radius: 12px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
    }

    .status-delivered {
      background-color: #d4edda;
      color: #155724;
    }

    .status-completed {
      background-color: #cce7ff;
      color: #004085;
    }

    .offer-discount {
      color: #e67e22;
      font-weight: 600;
    }

    .coupon-discount {
      color: #8e44ad;
      font-weight: 600;
    }

    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      display: none;
    }

    .loading-spinner {
      background: white;
      padding: 2rem;
      border-radius: 15px;
      text-align: center;
    }

    .empty-state {
      text-align: center;
      padding: 3rem;
      color: var(--secondary-color);
    }

    .empty-state i {
      font-size: 4rem;
      margin-bottom: 1rem;
      opacity: 0.5;
    }

    .pagination .page-link {
      color: var(--primary-color);
      border-color: #dee2e6;
    }

    .pagination .page-item.active .page-link {
      background-color: var(--primary-color);
      border-color: var(--primary-color);
    }

    .pagination .page-link:hover {
      color: var(--primary-color);
      background-color: #f8f9fa;
    }

    @media (max-width: 768px) {
      .metrics-grid {
        grid-template-columns: 1fr;
      }
      
      .main-content {
        padding: 1rem;
      }
      
      .filter-card {
        padding: 1rem;
      }
      
      .table-responsive {
        font-size: 0.875rem;
      }
    }
  </style>
</head>
<body>
  <!-- Include Admin Sidebar -->
  <%- include('partials/sidebar', { page: 'sales-reports' }) %>

  <div class="main-content">
    <!-- Page Header -->
    <div class="page-header">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h1 class="h3 mb-1">Sales Reports</h1>
          <p class="text-muted mb-0">Comprehensive sales analytics and reporting</p>
        </div>
        <div class="d-flex gap-2">
          <button class="btn btn-export" onclick="exportReport('pdf')" id="exportPdfBtn">
            <i class="fas fa-file-pdf me-2"></i>Export PDF
          </button>
          <button class="btn btn-export" onclick="exportReport('excel')" id="exportExcelBtn">
            <i class="fas fa-file-excel me-2"></i>Export Excel
          </button>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="filter-card">
      <h5 class="mb-3">
        <i class="fas fa-filter me-2"></i>Report Filters
      </h5>
      <form id="filterForm">
        <div class="row">
          <div class="col-md-3">
            <div class="filter-group">
              <label for="filterType">Filter Type</label>
              <select class="form-select" id="filterType" name="filterType">
                <option value="monthly">Monthly</option>
                <option value="weekly">Weekly</option>
                <option value="daily">Daily</option>
                <option value="custom">Custom Range</option>
              </select>
            </div>
          </div>
          
          <!-- Daily Filter -->
          <div class="col-md-3 filter-option" id="dailyFilter" style="display: none;">
            <div class="filter-group">
              <label for="selectedDate">Select Date</label>
              <input type="date" class="form-control" id="selectedDate" name="selectedDate">
            </div>
          </div>
          
          <!-- Weekly Filter -->
          <div class="col-md-3 filter-option" id="weeklyFilter" style="display: none;">
            <div class="filter-group">
              <label for="selectedWeek">Select Week</label>
              <input type="week" class="form-control" id="selectedWeek" name="selectedWeek">
            </div>
          </div>
          
          <!-- Monthly Filter -->
          <div class="col-md-3 filter-option" id="monthlyFilter">
            <div class="filter-group">
              <label for="selectedMonth">Select Month</label>
              <input type="month" class="form-control" id="selectedMonth" name="selectedMonth">
            </div>
          </div>
          
          <!-- Custom Range Filter -->
          <div class="col-md-6 filter-option" id="customFilter" style="display: none;">
            <div class="row">
              <div class="col-6">
                <div class="filter-group">
                  <label for="startDate">Start Date</label>
                  <input type="date" class="form-control" id="startDate" name="startDate">
                </div>
              </div>
              <div class="col-6">
                <div class="filter-group">
                  <label for="endDate">End Date</label>
                  <input type="date" class="form-control" id="endDate" name="endDate">
                </div>
              </div>
            </div>
          </div>
          
          <div class="col-md-3 d-flex align-items-end">
            <div class="filter-group w-100">
              <button type="submit" class="btn btn-filter w-100">
                <i class="fas fa-search me-2"></i>Apply Filter
              </button>
            </div>
          </div>
        </div>
      </form>
    </div>

    <!-- Report Title -->
    <div id="reportTitle" class="mb-3" style="display: none;">
      <h4 class="text-primary"></h4>
    </div>

    <!-- Metrics Cards -->
    <div class="metrics-grid" id="metricsGrid" style="display: none;">
      <div class="metric-card">
        <div class="metric-icon sales">
          <i class="fas fa-shopping-cart"></i>
        </div>
        <div class="metric-value" id="totalSalesCount">0</div>
        <div class="metric-label">Total Sales</div>
      </div>
      
      <div class="metric-card">
        <div class="metric-icon amount">
          <i class="fas fa-rupee-sign"></i>
        </div>
        <div class="metric-value" id="totalSalesAmount">₹0</div>
        <div class="metric-label">Sales Amount</div>
      </div>
      
      <div class="metric-card">
        <div class="metric-icon discounts">
          <i class="fas fa-tags"></i>
        </div>
        <div class="metric-value" id="totalOfferDiscounts">₹0</div>
        <div class="metric-label">Offer Discounts</div>
      </div>
      
      <div class="metric-card">
        <div class="metric-icon coupons">
          <i class="fas fa-ticket-alt"></i>
        </div>
        <div class="metric-value" id="totalCouponDeductions">₹0</div>
        <div class="metric-label">Coupon Discounts</div>
      </div>
    </div>

    <!-- Orders Table -->
    <div class="table-card" id="tableCard" style="display: none;">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h5 class="mb-0">
          <i class="fas fa-table me-2"></i>Sales Report Details
        </h5>
        <div class="d-flex align-items-center gap-3">
          <span class="text-muted" id="tableInfo">Showing 0 of 0 orders</span>
          <div class="d-flex align-items-center gap-2">
            <label for="pageSize" class="form-label mb-0 text-muted">Show:</label>
            <select class="form-select form-select-sm" id="pageSize" style="width: auto;">
              <option value="10">10</option>
              <option value="25">25</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
          </div>
        </div>
      </div>
      
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>Order ID</th>
              <th>Date</th>
              <th>User</th>
              <th>Total Amount</th>
              <th>Payment Method</th>
              <th>Status</th>
              <th>Offer Discount</th>
              <th>Coupon Discount</th>
              <th>Items</th>
            </tr>
          </thead>
          <tbody id="ordersTableBody">
            <!-- Orders will be populated here -->
          </tbody>
        </table>
      </div>
      
      <!-- Pagination -->
      <div class="d-flex justify-content-between align-items-center mt-3" id="paginationContainer" style="display: none;">
        <div class="text-muted" id="paginationInfo">
          Showing 0 to 0 of 0 entries
        </div>
        <nav aria-label="Table pagination">
          <ul class="pagination pagination-sm mb-0" id="paginationList">
            <!-- Pagination buttons will be populated here -->
          </ul>
        </nav>
      </div>
    </div>

    <!-- Empty State -->
    <div class="empty-state" id="emptyState">
      <i class="fas fa-table"></i>
      <h4>No Data Available</h4>
      <p>Select a filter and click "Apply Filter" to view sales reports</p>
    </div>
  </div>

  <!-- Loading Overlay -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
      <p class="mt-2 mb-0">Loading report data...</p>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let currentReportData = null;
    let currentPage = 1;
    let currentPageSize = 10;

    // Initialize page
    document.addEventListener('DOMContentLoaded', function() {
      console.log('Page loaded, initializing...');
      
      // Set default values
      const today = new Date();
      const currentMonth = today.getFullYear() + '-' + String(today.getMonth() + 1).padStart(2, '0');
      document.getElementById('selectedMonth').value = currentMonth;
      document.getElementById('selectedDate').value = today.toISOString().split('T')[0];
      
      // Set current week
      const startOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
      const year = startOfWeek.getFullYear();
      const week = getWeekNumber(startOfWeek);
      document.getElementById('selectedWeek').value = `${year}-W${String(week).padStart(2, '0')}`;

      // Page size change handler
      document.getElementById('pageSize').addEventListener('change', function() {
        currentPageSize = parseInt(this.value);
        currentPage = 1;
        loadSalesData();
      });

      // Load initial data
      loadSalesData();
    });

    // Filter type change handler
    document.getElementById('filterType').addEventListener('change', function() {
      const filterType = this.value;
      
      // Hide all filter options
      document.querySelectorAll('.filter-option').forEach(el => {
        el.style.display = 'none';
      });
      
      // Show relevant filter option
      if (filterType === 'daily') {
        document.getElementById('dailyFilter').style.display = 'block';
      } else if (filterType === 'weekly') {
        document.getElementById('weeklyFilter').style.display = 'block';
      } else if (filterType === 'monthly') {
        document.getElementById('monthlyFilter').style.display = 'block';
      } else if (filterType === 'custom') {
        document.getElementById('customFilter').style.display = 'block';
      }
    });

    // Form submit handler
    document.getElementById('filterForm').addEventListener('submit', function(e) {
      e.preventDefault();
      currentPage = 1;
      loadSalesData();
    });

    // Load sales data with pagination
    async function loadSalesData(page = currentPage) {
      try {
        console.log('Loading sales data for page:', page);
        showLoading(true);
        
        const formData = new FormData(document.getElementById('filterForm'));
        const params = new URLSearchParams();
        
        for (const [key, value] of formData.entries()) {
          if (value) {
            params.append(key, value);
          }
        }
        
        // Add pagination parameters
        params.append('page', page);
        params.append('limit', currentPageSize);

        console.log('Request params:', params.toString());
        
        const response = await fetch(`/admin/api/sales-data?${params.toString()}`);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('API Response:', result);

        if (result.success) {
          currentReportData = result.data;
          currentPage = page;
          displayReportData(result.data);
        } else {
          console.error('API returned error:', result.message);
          showEmptyState();
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message || 'Failed to load sales data'
          });
        }
      } catch (error) {
        console.error('Error loading sales data:', error);
        showEmptyState();
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'Failed to load sales data. Please check console for details.'
        });
      } finally {
        showLoading(false);
      }
    }

    // Display report data
    function displayReportData(data) {
      console.log('Displaying report data:', data);
      
      try {
        // Show report title
        if (data.reportTitle) {
          document.getElementById('reportTitle').style.display = 'block';
          document.getElementById('reportTitle').querySelector('h4').textContent = data.reportTitle;
        }

        // Update metrics
        if (data.metrics) {
          document.getElementById('totalSalesCount').textContent = data.metrics.totalSalesCount || 0;
          document.getElementById('totalSalesAmount').textContent = `₹${(data.metrics.totalSalesAmount || 0).toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
          document.getElementById('totalOfferDiscounts').textContent = `₹${(data.metrics.totalOfferDiscounts || 0).toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
          document.getElementById('totalCouponDeductions').textContent = `₹${(data.metrics.totalCouponDeductions || 0).toLocaleString('en-IN', {minimumFractionDigits: 2})}`;
          
          // Show metrics grid
          document.getElementById('metricsGrid').style.display = 'grid';
        }

        // Update orders table
        if (data.orders && data.orders.length > 0) {
          console.log('Orders found:', data.orders.length);
          updateOrdersTable(data.orders);
          
          if (data.pagination) {
            updatePagination(data.pagination);
            updateTableInfo(data.pagination);
            document.getElementById('paginationContainer').style.display = 'flex';
          }
          
          document.getElementById('tableCard').style.display = 'block';
          document.getElementById('emptyState').style.display = 'none';
        } else {
          console.log('No orders found');
          showEmptyState();
        }
      } catch (error) {
        console.error('Error displaying report data:', error);
        showEmptyState();
      }
    }

    // Show empty state
    function showEmptyState() {
      document.getElementById('tableCard').style.display = 'none';
      document.getElementById('paginationContainer').style.display = 'none';
      document.getElementById('emptyState').style.display = 'block';
    }

    // Update orders table
    function updateOrdersTable(orders) {
      console.log('Updating table with orders:', orders);
      const tbody = document.getElementById('ordersTableBody');
      tbody.innerHTML = '';

      orders.forEach((order, index) => {
        console.log(`Processing order ${index + 1}:`, order);
        
        const row = document.createElement('tr');
        
        // Format date nicely
        const orderDate = new Date(order.orderDate);
        const formattedDate = orderDate.toLocaleDateString('en-IN', {
          day: '2-digit',
          month: 'short',
          year: 'numeric'
        });
        const formattedTime = orderDate.toLocaleTimeString('en-IN', {
          hour: '2-digit',
          minute: '2-digit'
        });

        // Status badge color
        const statusClass = order.orderStatus === 'Delivered' ? 'status-delivered' : 'status-completed';

        row.innerHTML = `
          <td><strong>${order.orderNumber || 'N/A'}</strong></td>
          <td>
            <div>${formattedDate}</div>
            <small class="text-muted">${formattedTime}</small>
          </td>
          <td class="customer-info">
            <div class="customer-name">${order.customerName || 'N/A'}</div>
            <div class="customer-email">${order.customerEmail || 'N/A'}</div>
          </td>
          <td class="amount-cell">₹${(order.totalAmount || 0).toLocaleString('en-IN', {minimumFractionDigits: 2})}</td>
          <td>
            <i class="fas fa-${
              order.paymentMethod === 'COD' ? 'money-bill-wave' : 
              order.paymentMethod === 'Wallet' ? 'wallet' : 'credit-card'
            } me-1"></i>
            ${order.paymentMethod || 'N/A'}
          </td>
          <td>
            <span class="status-badge ${statusClass}">${order.orderStatus || 'N/A'}</span>
          </td>
          <td class="offer-discount">₹${(order.offerDiscount || 0).toLocaleString('en-IN', {minimumFractionDigits: 2})}</td>
          <td class="coupon-discount">₹${(order.couponDiscount || 0).toLocaleString('en-IN', {minimumFractionDigits: 2})}</td>
          <td>
            <span class="badge bg-primary">${order.itemCount || 0}</span>
          </td>
        `;
        tbody.appendChild(row);
      });
      
      console.log('Table updated successfully');
    }

    // Update pagination
    function updatePagination(pagination) {
      console.log('Updating pagination:', pagination);
      const paginationList = document.getElementById('paginationList');
      paginationList.innerHTML = '';

      if (!pagination || pagination.totalPages <= 1) {
        return;
      }

      // Previous button
      const prevLi = document.createElement('li');
      prevLi.className = `page-item ${!pagination.hasPrevPage ? 'disabled' : ''}`;
      prevLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.currentPage - 1})">Previous</a>`;
      paginationList.appendChild(prevLi);

      // Page numbers
      const startPage = Math.max(1, pagination.currentPage - 2);
      const endPage = Math.min(pagination.totalPages, pagination.currentPage + 2);

      if (startPage > 1) {
        const firstLi = document.createElement('li');
        firstLi.className = 'page-item';
        firstLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(1)">1</a>`;
        paginationList.appendChild(firstLi);

        if (startPage > 2) {
          const ellipsisLi = document.createElement('li');
          ellipsisLi.className = 'page-item disabled';
          ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
          paginationList.appendChild(ellipsisLi);
        }
      }

      for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement('li');
        li.className = `page-item ${i === pagination.currentPage ? 'active' : ''}`;
        li.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
        paginationList.appendChild(li);
      }

      if (endPage < pagination.totalPages) {
        if (endPage < pagination.totalPages - 1) {
          const ellipsisLi = document.createElement('li');
          ellipsisLi.className = 'page-item disabled';
          ellipsisLi.innerHTML = `<span class="page-link">...</span>`;
          paginationList.appendChild(ellipsisLi);
        }

        const lastLi = document.createElement('li');
        lastLi.className = 'page-item';
        lastLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.totalPages})">${pagination.totalPages}</a>`;
        paginationList.appendChild(lastLi);
      }

      // Next button
      const nextLi = document.createElement('li');
      nextLi.className = `page-item ${!pagination.hasNextPage ? 'disabled' : ''}`;
      nextLi.innerHTML = `<a class="page-link" href="#" onclick="changePage(${pagination.currentPage + 1})">Next</a>`;
      paginationList.appendChild(nextLi);
    }

    // Update table info
    function updateTableInfo(pagination) {
      if (!pagination) return;
      
      const start = (pagination.currentPage - 1) * pagination.limit + 1;
      const end = Math.min(pagination.currentPage * pagination.limit, pagination.totalOrders);
      
      document.getElementById('tableInfo').textContent = `Showing ${pagination.totalOrders} orders`;
      document.getElementById('paginationInfo').textContent = `Showing ${start} to ${end} of ${pagination.totalOrders} entries`;
    }

    // Change page
    function changePage(page) {
      if (page >= 1 && page <= (currentReportData?.pagination?.totalPages || 1)) {
        loadSalesData(page);
      }
    }

    // Export report
    async function exportReport(format) {
      if (!currentReportData) {
        Swal.fire({
          icon: 'warning',
          title: 'No Data',
          text: 'Please load report data before exporting'
        });
        return;
      }

      try {
        const formData = new FormData(document.getElementById('filterForm'));
        const params = new URLSearchParams();
        
        for (const [key, value] of formData.entries()) {
          if (value) {
            params.append(key, value);
          }
        }

        const url = `/admin/export-sales-report-${format}?${params.toString()}`;
        
        // Create a temporary link to download the file
        const link = document.createElement('a');
        link.href = url;
        link.download = `sales-report-${new Date().toISOString().split('T')[0]}.${format === 'pdf' ? 'pdf' : 'xlsx'}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        Swal.fire({
          icon: 'success',
          title: 'Export Started',
          text: `${format.toUpperCase()} export has been initiated`,
          timer: 2000,
          showConfirmButton: false
        });
      } catch (error) {
        console.error('Export error:', error);
        Swal.fire({
          icon: 'error',
          title: 'Export Failed',
          text: 'Failed to export report'
        });
      }
    }

    // Show/hide loading
    function showLoading(show) {
      document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
    }

    // Get week number
    function getWeekNumber(date) {
      const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
      const dayNum = d.getUTCDay() || 7;
      d.setUTCDate(d.getUTCDate() + 4 - dayNum);
      const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));
      return Math.ceil((((d - yearStart) / 86400000) + 1)/7);
    }
  </script>
</body>
</html>